// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHA.Repo;

#nullable disable

namespace SHA.Migrations
{
    [DbContext(typeof(AplicationDBContext))]
    [Migration("20250222051133_fixforeingkeyLineasCelulares")]
    partial class fixforeingkeyLineasCelulares
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHA.Domain.Entity.Computadora", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MacEthernet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MacWifi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomDispositivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Procesador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Computadoras");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Departamento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomDpto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Posicion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Directorio", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Cabina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NivelUbicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Directorios");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Empresa", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("SHA.Domain.Entity.EquiposDaniado", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmpresaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Equipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MacEthernet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MacWifi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procesador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioId");

                    b.ToTable("EquiposDaniados");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Laptop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MacEthernet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MacWifi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomDispositivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Procesador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("SHA.Domain.Entity.LineaCelular", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdUsuario");

                    b.ToTable("lineaCelulares");
                });

            modelBuilder.Entity("SHA.Domain.Entity.LineaTelefono", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LineaTelefonos");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Monitor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmpresaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Monitores");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Movil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmpresaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Imei")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Megas")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCelular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioPlan")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Moviles");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Rol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Tablet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Cabina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdEmpresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MacWifi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Tablets");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Telefono", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Cabina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Telefonos");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Computadora", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Empresa", "Empresa")
                        .WithMany("computadoras")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Directorio", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany("Directorios")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany("Directorios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.EquiposDaniado", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", null)
                        .WithMany("equiposDaniados")
                        .HasForeignKey("DepartamentoId");

                    b.HasOne("SHA.Domain.Entity.Empresa", null)
                        .WithMany("equiposDaniados")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", null)
                        .WithMany("equiposDaniados")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Departamento");

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Laptop", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Empresa", "Empresa")
                        .WithMany("laptops")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SHA.Domain.Entity.LineaCelular", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany("LineaCelulares")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany("LineaCelulares")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.LineaTelefono", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", null)
                        .WithMany("LineaTelefonos")
                        .HasForeignKey("DepartamentoId");

                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", null)
                        .WithMany("LineaTelefonos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Departamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Monitor", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", null)
                        .WithMany("Monitores")
                        .HasForeignKey("DepartamentoId");

                    b.HasOne("SHA.Domain.Entity.Empresa", null)
                        .WithMany("Monitores")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", null)
                        .WithMany("Monitores")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Departamento");

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Movil", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", null)
                        .WithMany("Moviles")
                        .HasForeignKey("DepartamentoId");

                    b.HasOne("SHA.Domain.Entity.Empresa", null)
                        .WithMany("Moviles")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", null)
                        .WithMany("Moviles")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Departamento");

                    b.Navigation("Empresa");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Tablet", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany("Tablets")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Empresa", "Empresa")
                        .WithMany("Tablets")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Telefono", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", null)
                        .WithMany("Telefonos")
                        .HasForeignKey("DepartamentoId");

                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Usuario", null)
                        .WithMany("Telefonos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Departamento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Usuario", b =>
                {
                    b.HasOne("SHA.Domain.Entity.Departamento", "Departamento")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHA.Domain.Entity.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Departamento", b =>
                {
                    b.Navigation("Directorios");

                    b.Navigation("LineaCelulares");

                    b.Navigation("LineaTelefonos");

                    b.Navigation("Monitores");

                    b.Navigation("Moviles");

                    b.Navigation("Tablets");

                    b.Navigation("Telefonos");

                    b.Navigation("Usuarios");

                    b.Navigation("equiposDaniados");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Empresa", b =>
                {
                    b.Navigation("Monitores");

                    b.Navigation("Moviles");

                    b.Navigation("Tablets");

                    b.Navigation("computadoras");

                    b.Navigation("equiposDaniados");

                    b.Navigation("laptops");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("SHA.Domain.Entity.Usuario", b =>
                {
                    b.Navigation("Directorios");

                    b.Navigation("LineaCelulares");

                    b.Navigation("LineaTelefonos");

                    b.Navigation("Monitores");

                    b.Navigation("Moviles");

                    b.Navigation("Telefonos");

                    b.Navigation("equiposDaniados");
                });
#pragma warning restore 612, 618
        }
    }
}
